version: "3.9"

services:
  kafka:
    image: bitnami/kafka:latest
    container_name: ${KAFKA_HOST}
    #temporary for code use start
    ports:
      - "9092:9092"
      - "9093:9093"
    #temporary for code use end
    environment:
      - KAFKA_ENABLE_KRAFT=true
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENERS=${KAFKA_CFG_LISTENERS}
      - KAFKA_CFG_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP}
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=${KAFKA_CFG_CONTROLLER_QUORUM_VOTERS}
      - KAFKA_CFG_CLUSTER_ID=${KAFKA_CLUSTER_ID}
    volumes:
      - /tmp/kafka:/bitnami/kafka
    networks:
      - kafka_net

  redis:
    image: bitnami/redis
    container_name: ${REDIS_HOST}
    networks:
      - redis_net
    restart: always
    
    #temporary for code use start
    ports:
      - "6379:6379"
    #temporary for code use end

    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/bitnami/redis

  postgres:
    image: bitnami/postgresql:latest
    container_name: ${POSTGRES_HOST}
    restart: always

    #temporary for code use start
    ports:
      - "5432:5432"
    #temporary for code use end

    environment:
      - POSTGRESQL_USERNAME=${POSTGRES_USER}
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRES_DATABASE}
    volumes:
      - /tmp/postgressql/data:/bitnami/postgresql
      - ./DBs/postgres:/docker-entrypoint-initdb.d
    networks:
      - postgres_net

  redis-helper:
    image: dt/redis-helper:latest
    container_name: ${REDIS_HELPER_HOST}
    depends_on:
      - redis
      - postgres

    networks:
      - redis_net
      - postgres_net
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - TABLE_NAME=${TABLE_NAME}
      - SCHEDULE_INTERVAL=${SCHEDULE_INTERVAL}

  otlp-kafka-bridge:
    image: dt/otlp-kafka-bridge:latest
    container_name: ${OTLP_KAFKA_BRIDGE_HOST}_1
    depends_on:
      - redis
      - kafka
      - postgres
    networks:
      - redis_net
      - kafka_net
      - postgres_net
      - micro_net
    environment:
      - HOST=${OTLP_KAFKA_BRIDGE_HOSTNAME}
      - PORT=${OTLP_KAFKA_BRIDGE_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - TABLE_NAME=${TABLE_NAME}

# microservices - testing purposes only
  micro_postgres:
    image: bitnami/postgresql:latest
    container_name: micro_postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres

    networks:
      - micro_net

  service1:
    build:
      context: ./Microservices/service1
    container_name: service1
    ports:
      - "8081:8081"
    environment:
      - SERVICE2_URL=http://service2:8080
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otlp-kafka-bridge:5000
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_EXPORTER_OTLP_HEADERS=application=distributed_tracing
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=distributed_tracing
      - OTEL_SERVICE_NAME=microservice1
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_LOGS_EXPORTER=none
      - OTEL_METRICS_EXPORTER=none
      - OTEL_TRACES_EXPORTER=otlp

    depends_on:
      - service2
      - otlp-kafka-bridge
    networks:
      - micro_net
    
  service2:
    build:
      context: ./Microservices/service2
    container_name: service2
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://micro_postgres:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otlp-kafka-bridge:5000
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_EXPORTER_OTLP_HEADERS=application=distributed_tracing
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=distributed_tracing
      - OTEL_SERVICE_NAME=microservice1
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_LOGS_EXPORTER=none
      - OTEL_METRICS_EXPORTER=none
      - OTEL_TRACES_EXPORTER=otlp

    depends_on:
      - micro_postgres
      - otlp-kafka-bridge
    networks:
      - micro_net

# microservices - testing purposes only


networks:
  kafka_net:
    driver: bridge
  redis_net:
    driver: bridge
  postgres_net:
    driver: bridge
  micro_net:
    driver: bridge


volumes:
  redis_data:
    driver: local